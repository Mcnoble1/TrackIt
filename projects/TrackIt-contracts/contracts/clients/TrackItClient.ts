/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(uint64,string)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "mint()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createProduct(string,uint64,string,string,string,string,uint64,uint64,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getRegisteredProduct()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "register(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setProductId(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "optInToAsset(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateProductLocation(string,uint64,string,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "transferOwnership(string,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getProductId()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getProductLocation(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getProductHistory(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "verifyProductAuthenticity(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "productId": {
          "type": "uint64",
          "key": "productId"
        },
        "productName": {
          "type": "bytes",
          "key": "productName"
        },
        "registeredProduct": {
          "type": "uint64",
          "key": "registeredProduct"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 2
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "TrackIt",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "productId",
            "type": "uint64"
          },
          {
            "name": "productName",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "mint",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "createProduct",
        "args": [
          {
            "name": "sender",
            "type": "string"
          },
          {
            "name": "productId",
            "type": "uint64"
          },
          {
            "name": "name",
            "type": "string"
          },
          {
            "name": "origin",
            "type": "string"
          },
          {
            "name": "category",
            "type": "string"
          },
          {
            "name": "manufacturer",
            "type": "string"
          },
          {
            "name": "timestamp",
            "type": "uint64"
          },
          {
            "name": "expiryDate",
            "type": "uint64"
          },
          {
            "name": "batchNumber",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getRegisteredProduct",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "register",
        "args": [
          {
            "name": "registeredProduct",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setProductId",
        "args": [
          {
            "name": "productId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "optInToAsset",
        "args": [
          {
            "name": "mbrTxn",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateProductLocation",
        "args": [
          {
            "name": "sender",
            "type": "string"
          },
          {
            "name": "productId",
            "type": "uint64"
          },
          {
            "name": "location",
            "type": "string"
          },
          {
            "name": "timestamp",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "transferOwnership",
        "args": [
          {
            "name": "sender",
            "type": "string"
          },
          {
            "name": "receiver",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getProductId",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getProductLocation",
        "args": [
          {
            "name": "productId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getProductHistory",
        "args": [
          {
            "name": "productId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "verifyProductAuthenticity",
        "args": [
          {
            "name": "productId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "deleteApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

/**
 * Defines the types of available calls and state of the TrackIt smart contract.
 */
export type TrackIt = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(uint64,string)void' | 'createApplication', {
      argsObj: {
        productId: bigint | number
        productName: string
      }
      argsTuple: [productId: bigint | number, productName: string]
      returns: void
    }>
    & Record<'mint()uint64' | 'mint', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'createProduct(string,uint64,string,string,string,string,uint64,uint64,string)void' | 'createProduct', {
      argsObj: {
        sender: string
        productId: bigint | number
        name: string
        origin: string
        category: string
        manufacturer: string
        timestamp: bigint | number
        expiryDate: bigint | number
        batchNumber: string
      }
      argsTuple: [sender: string, productId: bigint | number, name: string, origin: string, category: string, manufacturer: string, timestamp: bigint | number, expiryDate: bigint | number, batchNumber: string]
      returns: void
    }>
    & Record<'getRegisteredProduct()uint64' | 'getRegisteredProduct', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'register(uint64)void' | 'register', {
      argsObj: {
        registeredProduct: bigint | number
      }
      argsTuple: [registeredProduct: bigint | number]
      returns: void
    }>
    & Record<'setProductId(uint64)void' | 'setProductId', {
      argsObj: {
        productId: bigint | number
      }
      argsTuple: [productId: bigint | number]
      returns: void
    }>
    & Record<'optInToAsset(pay)void' | 'optInToAsset', {
      argsObj: {
        mbrTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [mbrTxn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'updateProductLocation(string,uint64,string,uint64)void' | 'updateProductLocation', {
      argsObj: {
        sender: string
        productId: bigint | number
        location: string
        timestamp: bigint | number
      }
      argsTuple: [sender: string, productId: bigint | number, location: string, timestamp: bigint | number]
      returns: void
    }>
    & Record<'transferOwnership(string,string)void' | 'transferOwnership', {
      argsObj: {
        sender: string
        receiver: string
      }
      argsTuple: [sender: string, receiver: string]
      returns: void
    }>
    & Record<'getProductId()uint64' | 'getProductId', {
      argsObj: {
      }
      argsTuple: []
      returns: bigint
    }>
    & Record<'getProductLocation(uint64)uint64' | 'getProductLocation', {
      argsObj: {
        productId: bigint | number
      }
      argsTuple: [productId: bigint | number]
      returns: bigint
    }>
    & Record<'getProductHistory(uint64)uint64' | 'getProductHistory', {
      argsObj: {
        productId: bigint | number
      }
      argsTuple: [productId: bigint | number]
      returns: bigint
    }>
    & Record<'verifyProductAuthenticity(uint64)uint64' | 'verifyProductAuthenticity', {
      argsObj: {
        productId: bigint | number
      }
      argsTuple: [productId: bigint | number]
      returns: bigint
    }>
    & Record<'deleteApplication()void' | 'deleteApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'productId'?: IntegerState
      'productName'?: BinaryState
      'registeredProduct'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type TrackItSig = keyof TrackIt['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends TrackItSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the TrackIt smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends TrackItSig> = TrackIt['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the TrackIt smart contract to the method's return type
 */
export type MethodReturn<TSignature extends TrackItSig> = TrackIt['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type TrackItCreateCalls = (typeof TrackItCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type TrackItCreateCallParams =
  | (TypedCallParams<'createApplication(uint64,string)void'> & (OnCompleteNoOp))
/**
 * A factory for available 'delete' calls
 */
export type TrackItDeleteCalls = (typeof TrackItCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type TrackItDeleteCallParams =
  | TypedCallParams<'deleteApplication()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type TrackItDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: TrackItCreateCalls) => TrackItCreateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: TrackItDeleteCalls) => TrackItDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class TrackItCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the TrackIt smart contract using the createApplication(uint64,string)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(uint64,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(uint64,string)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.productId, args.productName],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the TrackIt smart contract using the deleteApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'deleteApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the mint()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static mint(args: MethodArgs<'mint()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'mint()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the createProduct(string,uint64,string,string,string,string,uint64,uint64,string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createProduct(args: MethodArgs<'createProduct(string,uint64,string,string,string,string,uint64,uint64,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createProduct(string,uint64,string,string,string,string,uint64,uint64,string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.sender, args.productId, args.name, args.origin, args.category, args.manufacturer, args.timestamp, args.expiryDate, args.batchNumber],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getRegisteredProduct()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getRegisteredProduct(args: MethodArgs<'getRegisteredProduct()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getRegisteredProduct()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the register(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static register(args: MethodArgs<'register(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'register(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.registeredProduct],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the setProductId(uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setProductId(args: MethodArgs<'setProductId(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setProductId(uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.productId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the optInToAsset(pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static optInToAsset(args: MethodArgs<'optInToAsset(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'optInToAsset(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.mbrTxn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the updateProductLocation(string,uint64,string,uint64)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static updateProductLocation(args: MethodArgs<'updateProductLocation(string,uint64,string,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'updateProductLocation(string,uint64,string,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.sender, args.productId, args.location, args.timestamp],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the transferOwnership(string,string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static transferOwnership(args: MethodArgs<'transferOwnership(string,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'transferOwnership(string,string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.sender, args.receiver],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getProductId()uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getProductId(args: MethodArgs<'getProductId()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getProductId()uint64' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getProductLocation(uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getProductLocation(args: MethodArgs<'getProductLocation(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getProductLocation(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.productId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getProductHistory(uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getProductHistory(args: MethodArgs<'getProductHistory(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getProductHistory(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.productId],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the verifyProductAuthenticity(uint64)uint64 ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static verifyProductAuthenticity(args: MethodArgs<'verifyProductAuthenticity(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'verifyProductAuthenticity(uint64)uint64' as const,
      methodArgs: Array.isArray(args) ? args : [args.productId],
      ...params,
    }
  }
}

/**
 * A client to make calls to the TrackIt smart contract
 */
export class TrackItClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `TrackItClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof TrackIt['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the TrackIt smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: TrackItDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(TrackItCallFactory.create)
    const deleteArgs = params.deleteCall?.(TrackItCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the TrackIt smart contract using the createApplication(uint64,string)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(uint64,string)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication(uint64,string)void'>, AppCreateCallTransactionResult>(await $this.appClient.create(TrackItCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the TrackIt smart contract using the deleteApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async deleteApplication(args: MethodArgs<'deleteApplication()void'>, params: AppClientCallCoreParams = {}) {
        return $this.mapReturnValue<MethodReturn<'deleteApplication()void'>>(await $this.appClient.delete(TrackItCallFactory.delete.deleteApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the TrackIt smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the mint()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public mint(args: MethodArgs<'mint()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(TrackItCallFactory.mint(args, params))
  }

  /**
   * Calls the createProduct(string,uint64,string,string,string,string,uint64,uint64,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createProduct(args: MethodArgs<'createProduct(string,uint64,string,string,string,string,uint64,uint64,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(TrackItCallFactory.createProduct(args, params))
  }

  /**
   * Calls the getRegisteredProduct()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getRegisteredProduct(args: MethodArgs<'getRegisteredProduct()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(TrackItCallFactory.getRegisteredProduct(args, params))
  }

  /**
   * Calls the register(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public register(args: MethodArgs<'register(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(TrackItCallFactory.register(args, params))
  }

  /**
   * Calls the setProductId(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setProductId(args: MethodArgs<'setProductId(uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(TrackItCallFactory.setProductId(args, params))
  }

  /**
   * Calls the optInToAsset(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public optInToAsset(args: MethodArgs<'optInToAsset(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(TrackItCallFactory.optInToAsset(args, params))
  }

  /**
   * Calls the updateProductLocation(string,uint64,string,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public updateProductLocation(args: MethodArgs<'updateProductLocation(string,uint64,string,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(TrackItCallFactory.updateProductLocation(args, params))
  }

  /**
   * Calls the transferOwnership(string,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public transferOwnership(args: MethodArgs<'transferOwnership(string,string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(TrackItCallFactory.transferOwnership(args, params))
  }

  /**
   * Calls the getProductId()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getProductId(args: MethodArgs<'getProductId()uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(TrackItCallFactory.getProductId(args, params))
  }

  /**
   * Calls the getProductLocation(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getProductLocation(args: MethodArgs<'getProductLocation(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(TrackItCallFactory.getProductLocation(args, params))
  }

  /**
   * Calls the getProductHistory(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getProductHistory(args: MethodArgs<'getProductHistory(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(TrackItCallFactory.getProductHistory(args, params))
  }

  /**
   * Calls the verifyProductAuthenticity(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public verifyProductAuthenticity(args: MethodArgs<'verifyProductAuthenticity(uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(TrackItCallFactory.verifyProductAuthenticity(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<TrackIt['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get productId() {
        return TrackItClient.getIntegerState(state, 'productId')
      },
      get productName() {
        return TrackItClient.getBinaryState(state, 'productName')
      },
      get registeredProduct() {
        return TrackItClient.getIntegerState(state, 'registeredProduct')
      },
    }
  }

  public compose(): TrackItComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      mint(args: MethodArgs<'mint()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.mint(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      createProduct(args: MethodArgs<'createProduct(string,uint64,string,string,string,string,uint64,uint64,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createProduct(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getRegisteredProduct(args: MethodArgs<'getRegisteredProduct()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getRegisteredProduct(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      register(args: MethodArgs<'register(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.register(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      setProductId(args: MethodArgs<'setProductId(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setProductId(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      optInToAsset(args: MethodArgs<'optInToAsset(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.optInToAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      updateProductLocation(args: MethodArgs<'updateProductLocation(string,uint64,string,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.updateProductLocation(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      transferOwnership(args: MethodArgs<'transferOwnership(string,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.transferOwnership(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getProductId(args: MethodArgs<'getProductId()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getProductId(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getProductLocation(args: MethodArgs<'getProductLocation(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getProductLocation(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getProductHistory(args: MethodArgs<'getProductHistory(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getProductHistory(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      verifyProductAuthenticity(args: MethodArgs<'verifyProductAuthenticity(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.verifyProductAuthenticity(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        const $this = this
        return {
          deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.deleteApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as TrackItComposer
  }
}
export type TrackItComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the mint()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  mint(args: MethodArgs<'mint()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): TrackItComposer<[...TReturns, MethodReturn<'mint()uint64'>]>

  /**
   * Calls the createProduct(string,uint64,string,string,string,string,uint64,uint64,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createProduct(args: MethodArgs<'createProduct(string,uint64,string,string,string,string,uint64,uint64,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): TrackItComposer<[...TReturns, MethodReturn<'createProduct(string,uint64,string,string,string,string,uint64,uint64,string)void'>]>

  /**
   * Calls the getRegisteredProduct()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getRegisteredProduct(args: MethodArgs<'getRegisteredProduct()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): TrackItComposer<[...TReturns, MethodReturn<'getRegisteredProduct()uint64'>]>

  /**
   * Calls the register(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  register(args: MethodArgs<'register(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): TrackItComposer<[...TReturns, MethodReturn<'register(uint64)void'>]>

  /**
   * Calls the setProductId(uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setProductId(args: MethodArgs<'setProductId(uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): TrackItComposer<[...TReturns, MethodReturn<'setProductId(uint64)void'>]>

  /**
   * Calls the optInToAsset(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToAsset(args: MethodArgs<'optInToAsset(pay)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): TrackItComposer<[...TReturns, MethodReturn<'optInToAsset(pay)void'>]>

  /**
   * Calls the updateProductLocation(string,uint64,string,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateProductLocation(args: MethodArgs<'updateProductLocation(string,uint64,string,uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): TrackItComposer<[...TReturns, MethodReturn<'updateProductLocation(string,uint64,string,uint64)void'>]>

  /**
   * Calls the transferOwnership(string,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  transferOwnership(args: MethodArgs<'transferOwnership(string,string)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): TrackItComposer<[...TReturns, MethodReturn<'transferOwnership(string,string)void'>]>

  /**
   * Calls the getProductId()uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProductId(args: MethodArgs<'getProductId()uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): TrackItComposer<[...TReturns, MethodReturn<'getProductId()uint64'>]>

  /**
   * Calls the getProductLocation(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProductLocation(args: MethodArgs<'getProductLocation(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): TrackItComposer<[...TReturns, MethodReturn<'getProductLocation(uint64)uint64'>]>

  /**
   * Calls the getProductHistory(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProductHistory(args: MethodArgs<'getProductHistory(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): TrackItComposer<[...TReturns, MethodReturn<'getProductHistory(uint64)uint64'>]>

  /**
   * Calls the verifyProductAuthenticity(uint64)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  verifyProductAuthenticity(args: MethodArgs<'verifyProductAuthenticity(uint64)uint64'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): TrackItComposer<[...TReturns, MethodReturn<'verifyProductAuthenticity(uint64)uint64'>]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the TrackIt smart contract using the deleteApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    deleteApplication(args: MethodArgs<'deleteApplication()void'>, params?: AppClientComposeCallCoreParams): TrackItComposer<[...TReturns, MethodReturn<'deleteApplication()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the TrackIt smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): TrackItComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): TrackItComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<TrackItComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<TrackItComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type TrackItComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type TrackItComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
