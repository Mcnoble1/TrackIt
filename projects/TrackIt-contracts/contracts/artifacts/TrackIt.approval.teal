#pragma version 10
intcblock 1 0 4
bytecblock 0x70726f647563744964 0x7265676973746572656450726f64756374 0x151f7c75

// This TEAL was generated by TEALScript v0.105.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(uint64,string)void
*abi_route_createApplication:
	// productName: string
	txna ApplicationArgs 2
	extract 2 0

	// productId: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64,string)void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(productId: AssetID, productName: string): void
createApplication:
	proto 2 0

	// contracts\TrackIt.algo.ts:12
	// this.productId.value = productId
	bytec 0 //  "productId"
	frame_dig -1 // productId: AssetID
	app_global_put

	// contracts\TrackIt.algo.ts:13
	// this.productName.value = productName
	pushbytes 0x70726f647563744e616d65 // "productName"
	frame_dig -2 // productName: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	app_global_put
	retsub

// mint()uint64
*abi_route_mint:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// execute mint()uint64
	callsub mint
	itob
	concat
	log
	intc 0 // 1
	return

// mint(): AssetID
mint:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	pushbytes 0x

	// contracts\TrackIt.algo.ts:18
	// verifyTxn(this.txn, { sender: this.app.creator })
	// verify sender
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.app.creator"}
	assert

	// contracts\TrackIt.algo.ts:19
	// assert(!this.registeredProduct.exists, 'The product is already registered and callable only once')
	txna Applications 0
	bytec 1 //  "registeredProduct"
	app_global_get_ex
	swap
	pop
	!

	// The product is already registered and callable only once
	assert

	// contracts\TrackIt.algo.ts:20
	// registeredProduct = sendAssetCreation({
	//       configAssetTotal: 1_000,
	//       configAssetFreeze: this.app.address, // can't send the token to someone else
	//     })
	itxn_begin
	pushint 3 // acfg
	itxn_field TypeEnum

	// contracts\TrackIt.algo.ts:21
	// configAssetTotal: 1_000
	pushint 1_000
	itxn_field ConfigAssetTotal

	// contracts\TrackIt.algo.ts:22
	// configAssetFreeze: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetFreeze

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	frame_bury 0 // registeredProduct: uint64

	// contracts\TrackIt.algo.ts:25
	// this.registeredProduct.value = registeredProduct
	bytec 1 //  "registeredProduct"
	frame_dig 0 // registeredProduct: uint64
	app_global_put

	// contracts\TrackIt.algo.ts:27
	// return registeredProduct;
	frame_dig 0 // registeredProduct: uint64

	// set the subroutine return value
	frame_bury 0
	retsub

// createProduct(string,uint64,string,string,string,string,uint64,uint64,string)void
*abi_route_createProduct:
	// batchNumber: string
	txna ApplicationArgs 9
	extract 2 0

	// expiryDate: uint64
	txna ApplicationArgs 8
	btoi

	// timestamp: uint64
	txna ApplicationArgs 7
	btoi

	// manufacturer: string
	txna ApplicationArgs 6
	extract 2 0

	// category: string
	txna ApplicationArgs 5
	extract 2 0

	// origin: string
	txna ApplicationArgs 4
	extract 2 0

	// name: string
	txna ApplicationArgs 3
	extract 2 0

	// productId: uint64
	txna ApplicationArgs 2
	btoi

	// sender: string
	txna ApplicationArgs 1
	extract 2 0

	// execute createProduct(string,uint64,string,string,string,string,uint64,uint64,string)void
	callsub createProduct
	intc 0 // 1
	return

// createProduct(sender: string, productId: AssetID, name: string, origin: string, category: string, manufacturer: string, timestamp: uint64, expiryDate: uint64, batchNumber: string): void
createProduct:
	proto 9 0

	// contracts\TrackIt.algo.ts:42
	// assert(this.txn.sender.assetBalance(this.registeredProduct.value) === 1, 'Get the product token first')
	txn Sender
	bytec 1 //  "registeredProduct"
	app_global_get
	asset_holding_get AssetBalance
	pop
	intc 0 // 1
	==

	// Get the product token first
	assert

	// contracts\TrackIt.algo.ts:44
	// sendPayment({
	//       sender: this.app.creator,
	//       receiver: this.app.creator,
	//       amount: 0,
	//       // note,
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts\TrackIt.algo.ts:45
	// sender: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field Sender

	// contracts\TrackIt.algo.ts:46
	// receiver: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field Receiver

	// contracts\TrackIt.algo.ts:47
	// amount: 0
	intc 1 // 0
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// getRegisteredProduct()uint64
*abi_route_getRegisteredProduct:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// execute getRegisteredProduct()uint64
	callsub getRegisteredProduct
	itob
	concat
	log
	intc 0 // 1
	return

// getRegisteredProduct(): AssetID
getRegisteredProduct:
	proto 0 1

	// contracts\TrackIt.algo.ts:53
	// return this.registeredProduct.value;
	bytec 1 //  "registeredProduct"
	app_global_get
	retsub

// register(uint64)void
*abi_route_register:
	// registeredProduct: uint64
	txna ApplicationArgs 1
	btoi

	// execute register(uint64)void
	callsub register
	intc 0 // 1
	return

// register(registeredProduct: AssetID): void
register:
	proto 1 0

	// contracts\TrackIt.algo.ts:58
	// assert(this.txn.sender.assetBalance(this.registeredProduct.value) === 0, 'The product is already registered')
	txn Sender
	bytec 1 //  "registeredProduct"
	app_global_get
	asset_holding_get AssetBalance
	pop
	intc 1 // 0
	==

	// The product is already registered
	assert

	// contracts\TrackIt.algo.ts:59
	// sendAssetTransfer({
	//       xferAsset: this.registeredProduct.value,
	//       assetAmount: 1,
	//       assetReceiver: this.txn.sender,
	//     })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts\TrackIt.algo.ts:60
	// xferAsset: this.registeredProduct.value
	bytec 1 //  "registeredProduct"
	app_global_get
	itxn_field XferAsset

	// contracts\TrackIt.algo.ts:61
	// assetAmount: 1
	intc 0 // 1
	itxn_field AssetAmount

	// contracts\TrackIt.algo.ts:62
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\TrackIt.algo.ts:64
	// sendAssetFreeze({
	//       freezeAsset: this.registeredProduct.value,
	//       freezeAssetAccount: this.txn.sender,
	//       freezeAssetFrozen: true,
	//     })
	itxn_begin
	pushint 5 // afrz
	itxn_field TypeEnum

	// contracts\TrackIt.algo.ts:65
	// freezeAsset: this.registeredProduct.value
	bytec 1 //  "registeredProduct"
	app_global_get
	itxn_field FreezeAsset

	// contracts\TrackIt.algo.ts:66
	// freezeAssetAccount: this.txn.sender
	txn Sender
	itxn_field FreezeAssetAccount

	// contracts\TrackIt.algo.ts:67
	// freezeAssetFrozen: true
	intc 0 // 1
	itxn_field FreezeAssetFrozen

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// setProductId(uint64)void
*abi_route_setProductId:
	// productId: uint64
	txna ApplicationArgs 1
	btoi

	// execute setProductId(uint64)void
	callsub setProductId
	intc 0 // 1
	return

// setProductId(productId: AssetID): void
setProductId:
	proto 1 0

	// contracts\TrackIt.algo.ts:73
	// assert(this.txn.sender === this.app.creator, 'Only the creator can set the product ID')
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// Only the creator can set the product ID
	assert

	// contracts\TrackIt.algo.ts:74
	// this.productId.value = productId
	bytec 0 //  "productId"
	frame_dig -1 // productId: AssetID
	app_global_put
	retsub

// optInToAsset(pay)void
*abi_route_optInToAsset:
	// mbrTxn: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (mbrTxn) for optInToAsset must be a pay transaction
	assert

	// execute optInToAsset(pay)void
	callsub optInToAsset
	intc 0 // 1
	return

// optInToAsset(mbrTxn: PayTxn): void
optInToAsset:
	proto 1 0

	// contracts\TrackIt.algo.ts:79
	// assert(this.txn.sender === this.app.creator, 'Only the creator can opt in to the asset')
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// Only the creator can opt in to the asset
	assert

	// contracts\TrackIt.algo.ts:80
	// verifyPayTxn(mbrTxn, {
	//       receiver: this.app.address,
	//       amount: globals.minBalance + globals.assetOptInMinBalance,
	//     })
	// verify receiver
	frame_dig -1 // mbrTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mbrTxn","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // mbrTxn: PayTxn
	gtxns Amount
	global MinBalance
	global AssetOptInMinBalance
	+
	==

	// transaction verification failed: {"txn":"mbrTxn","field":"amount","expected":"globals.minBalance + globals.assetOptInMinBalance"}
	assert

	// contracts\TrackIt.algo.ts:85
	// sendAssetTransfer({
	//       xferAsset: this.productId.value,
	//       assetAmount: 0,
	//       assetReceiver: this.app.address,
	//     })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts\TrackIt.algo.ts:86
	// xferAsset: this.productId.value
	bytec 0 //  "productId"
	app_global_get
	itxn_field XferAsset

	// contracts\TrackIt.algo.ts:87
	// assetAmount: 0
	intc 1 // 0
	itxn_field AssetAmount

	// contracts\TrackIt.algo.ts:88
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// updateProductLocation(string,uint64,string,uint64)void
*abi_route_updateProductLocation:
	// timestamp: uint64
	txna ApplicationArgs 4
	btoi

	// location: string
	txna ApplicationArgs 3
	extract 2 0

	// productId: uint64
	txna ApplicationArgs 2
	btoi

	// sender: string
	txna ApplicationArgs 1
	extract 2 0

	// execute updateProductLocation(string,uint64,string,uint64)void
	callsub updateProductLocation
	intc 0 // 1
	return

// updateProductLocation(sender: string, productId: AssetID, location: string, timestamp: uint64): void
updateProductLocation:
	proto 4 0

	// contracts\TrackIt.algo.ts:99
	// assert(this.productId.value.id !== 0, 'The product ID is not set')
	bytec 0 //  "productId"
	app_global_get
	intc 1 // 0
	!=

	// The product ID is not set
	assert

	// contracts\TrackIt.algo.ts:101
	// sendPayment({
	//       sender: this.app.creator,
	//       receiver: this.app.creator,
	//       amount: 0,
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts\TrackIt.algo.ts:102
	// sender: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field Sender

	// contracts\TrackIt.algo.ts:103
	// receiver: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field Receiver

	// contracts\TrackIt.algo.ts:104
	// amount: 0
	intc 1 // 0
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// transferOwnership(string,string)void
*abi_route_transferOwnership:
	// receiver: string
	txna ApplicationArgs 2
	extract 2 0

	// sender: string
	txna ApplicationArgs 1
	extract 2 0

	// execute transferOwnership(string,string)void
	callsub transferOwnership
	intc 0 // 1
	return

// transferOwnership(sender: string, receiver: string): void
transferOwnership:
	proto 2 0

	// contracts\TrackIt.algo.ts:110
	// assert(this.productId.value.id !== 0, 'The product ID is not set')
	bytec 0 //  "productId"
	app_global_get
	intc 1 // 0
	!=

	// The product ID is not set
	assert

	// contracts\TrackIt.algo.ts:112
	// sendPayment({
	//       sender: this.app.creator,
	//       receiver: this.app.creator,
	//       amount: 0,
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts\TrackIt.algo.ts:113
	// sender: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field Sender

	// contracts\TrackIt.algo.ts:114
	// receiver: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field Receiver

	// contracts\TrackIt.algo.ts:115
	// amount: 0
	intc 1 // 0
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// getProductId()uint64
*abi_route_getProductId:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// execute getProductId()uint64
	callsub getProductId
	itob
	concat
	log
	intc 0 // 1
	return

// getProductId(): AssetID
getProductId:
	proto 0 1

	// contracts\TrackIt.algo.ts:121
	// return this.productId.value;
	bytec 0 //  "productId"
	app_global_get
	retsub

// getProductLocation(uint64)uint64
*abi_route_getProductLocation:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// productId: uint64
	txna ApplicationArgs 1
	btoi

	// execute getProductLocation(uint64)uint64
	callsub getProductLocation
	itob
	concat
	log
	intc 0 // 1
	return

// getProductLocation(productId: AssetID): AssetID
getProductLocation:
	proto 1 1

	// contracts\TrackIt.algo.ts:126
	// return this.productId.value;
	bytec 0 //  "productId"
	app_global_get
	retsub

// getProductHistory(uint64)uint64
*abi_route_getProductHistory:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// productId: uint64
	txna ApplicationArgs 1
	btoi

	// execute getProductHistory(uint64)uint64
	callsub getProductHistory
	itob
	concat
	log
	intc 0 // 1
	return

// getProductHistory(productId: AssetID): AssetID
getProductHistory:
	proto 1 1

	// contracts\TrackIt.algo.ts:131
	// return this.productId.value;
	bytec 0 //  "productId"
	app_global_get
	retsub

// verifyProductAuthenticity(uint64)uint64
*abi_route_verifyProductAuthenticity:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// productId: uint64
	txna ApplicationArgs 1
	btoi

	// execute verifyProductAuthenticity(uint64)uint64
	callsub verifyProductAuthenticity
	itob
	concat
	log
	intc 0 // 1
	return

// verifyProductAuthenticity(productId: AssetID): AssetID
verifyProductAuthenticity:
	proto 1 1

	// contracts\TrackIt.algo.ts:136
	// return this.productId.value;
	bytec 0 //  "productId"
	app_global_get
	retsub

// deleteApplication()void
*abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	intc 0 // 1
	return

// deleteApplication(): void
deleteApplication:
	proto 0 0

	// contracts\TrackIt.algo.ts:140
	// assert(this.txn.sender === this.app.creator, 'Only the creator can delete the application')
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// Only the creator can delete the application
	assert

	// contracts\TrackIt.algo.ts:141
	// sendAssetTransfer({
	//       xferAsset: this.productId.value,
	//       assetAmount: this.app.address.assetBalance(this.productId.value),
	//       assetReceiver: this.app.creator,
	//       assetCloseTo: this.app.creator,
	//     })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// contracts\TrackIt.algo.ts:142
	// xferAsset: this.productId.value
	bytec 0 //  "productId"
	app_global_get
	itxn_field XferAsset

	// contracts\TrackIt.algo.ts:143
	// assetAmount: this.app.address.assetBalance(this.productId.value)
	global CurrentApplicationAddress
	bytec 0 //  "productId"
	app_global_get
	asset_holding_get AssetBalance
	pop
	itxn_field AssetAmount

	// contracts\TrackIt.algo.ts:144
	// assetReceiver: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field AssetReceiver

	// contracts\TrackIt.algo.ts:145
	// assetCloseTo: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field AssetCloseTo

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// contracts\TrackIt.algo.ts:148
	// sendPayment({
	//       receiver: this.app.creator,
	//       amount: this.app.address.balance,
	//       closeRemainderTo: this.app.creator,
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// contracts\TrackIt.algo.ts:149
	// receiver: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field Receiver

	// contracts\TrackIt.algo.ts:150
	// amount: this.app.address.balance
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	itxn_field Amount

	// contracts\TrackIt.algo.ts:151
	// closeRemainderTo: this.app.creator
	txna Applications 0
	app_params_get AppCreator
	pop
	itxn_field CloseRemainderTo

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*create_NoOp:
	pushbytes 0xb8c56f52 // method "createApplication(uint64,string)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x99f19a33 // method "mint()uint64"
	pushbytes 0xe7b88070 // method "createProduct(string,uint64,string,string,string,string,uint64,uint64,string)void"
	pushbytes 0xd8f05ae3 // method "getRegisteredProduct()uint64"
	pushbytes 0xf7e99a83 // method "register(uint64)void"
	pushbytes 0x302de6e0 // method "setProductId(uint64)void"
	pushbytes 0x37e84677 // method "optInToAsset(pay)void"
	pushbytes 0xcf469414 // method "updateProductLocation(string,uint64,string,uint64)void"
	pushbytes 0xa9c8cf35 // method "transferOwnership(string,string)void"
	pushbytes 0x2c0bf148 // method "getProductId()uint64"
	pushbytes 0x69e4e09e // method "getProductLocation(uint64)uint64"
	pushbytes 0x5cfaba1f // method "getProductHistory(uint64)uint64"
	pushbytes 0x67fbb6b7 // method "verifyProductAuthenticity(uint64)uint64"
	txna ApplicationArgs 0
	match *abi_route_mint *abi_route_createProduct *abi_route_getRegisteredProduct *abi_route_register *abi_route_setProductId *abi_route_optInToAsset *abi_route_updateProductLocation *abi_route_transferOwnership *abi_route_getProductId *abi_route_getProductLocation *abi_route_getProductHistory *abi_route_verifyProductAuthenticity

	// this contract does not implement the given ABI method for call NoOp
	err

*call_DeleteApplication:
	pushbytes 0x2487c32c // method "deleteApplication()void"
	txna ApplicationArgs 0
	match *abi_route_deleteApplication

	// this contract does not implement the given ABI method for call DeleteApplication
	err